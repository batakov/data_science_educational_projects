
-- Задание 1. В каких городах больше одного аэропорта?
-- ОПИСАНИЕ РЕШЕНИЯ.
-- Работаем с таблицей airports. С помощью функции count подсчитываем кол-во аэропортов с группировкой по городам.
-- Далее с помощью having оставляем только те строки, для которых значение count больше 1.
-- Таким образом, получаем города, где более одного аэропорта. 
select city as "Название города", count (airport_code) as "Количество аэропортов в городе"
from airports a
group by city
having count (airport_code) > 1


-- Задание 2. В каких аэропортах есть рейсы, выполняемые самолетом с максимальной дальностью перелета?
-- ОПИСАНИЕ РЕШЕНИЯ.
-- Работаем с таблицей перелетов (flight). Соединяем с ней таблицу aircrafts по идентификатору кода самолета, и 
-- таблицу аэропортов airports по идентификатору кода аэропорта.
-- В результат выводим коды аэропортов и их названия; с помощью подзапроса к таблице характеристик самолетов (получаем макс. дальность полета самолета),
-- отфильтровываем только те результаты, для котороых значение дальности палета самолета будет максимальным (который получаем из подзапроса).
select distinct departure_airport as "Код аэропорта", airport_name as "Наименование аэропорта"
from flights f 
join aircrafts a on f.aircraft_code = a.aircraft_code
join airports a2 on f.departure_airport = a2.airport_code 
where "range" = (select max("range") from aircrafts a)

-- Задание 3. Вывести 10 рейсов с максимальным временем задержки вылета.
-- ОПИСАНИЕ РЕШЕНИЯ.
-- Работаем с таблице перелетов (flight). В результат выводим идентификатор полета, номер рейса, статус рейса, планируемую дату вылета,
-- фактическую дату вылета и "задержку" вылета в видеа разности фактической даты вылета и планируемой, оставляем только непустые значения.
-- Результат сортируем по значению задержки в порядке убываения и оставляем первые 10 значений. 
select flight_id, flight_no as "Рейс", status, scheduled_departure, actual_departure, (actual_departure - scheduled_departure) as "Задержка"
from flights f 
where (actual_departure - scheduled_departure) is not null
order by "Задержка" desc
limit 10

-- Задание 4. Были ли брони, по которым не были получены посадочные талоны?
-- ОПИСАНИЕ РЕШЕНИЯ.
-- Работаем с таблицей бронирований. Соединяем с ней таблицу билетов по идентификатору book_ref, а к ней присоединяем таблицу boarding_passes
-- по идентификатору ticket_no. В результат выводим столбец с номерами брони и столбец с датами брони.
-- И далее оставляем только те строки, где значение номера посадочного талона равно NULL.
select distinct b.book_ref as "Номер брони", b.book_date "Дата брони"
from bookings b 
join tickets t on b.book_ref = t.book_ref
left join boarding_passes bp on t.ticket_no = bp.ticket_no
where boarding_no is null

-- Задание 5. Найдите количество свободных мест для каждого рейса, их % отношение к общему количеству мест в самолете.
-- Добавьте столбец с накопительным итогом - суммарное накопление количества вывезенных пассажиров из каждого аэропорта на каждый день,
-- т.е. в этом столбце должна отражаться накопительная сумма - сколько человек уже вылетело из данного аэропорта на этом или более ранних рейсах в течении дня.
-- ОПИСАНИЕ РЕШЕНИЯ.
-- Работаем с таблицей перелетов.
-- Самым внутренним подзапросом получаем общее количество мест в каждой модели самолета.
-- Следующим этапом выводим из таблицы перелетов в результат фактическую дату вылета, аэропорт вылета, идентификатор рейса и номер рейса, код самолета,
-- функцией count считаем количество занятых мест на каждом рейсе и выводим столбец с общим количеством мест для каждого самолета из внутреннего подзапроса,
-- для этого к таблице перелетов присоединяем таблицу подсадочных талонов по идендификатору перелета flight_id и также джойним результат внутреннего подзапроса,
-- по идентификатору кода самолета aircraft_code, при этом с помощью where оставляем только строки, где значение фактической даты вылета не пустое.
-- Окончательным этапом из полученной таблицы в результат выводим номер рейса, фактическую дату вылета, количество свободных мест как разница между общим количеством мест и
-- количеством занятых мест, при этом используя эти данные подсчитываем % отношения свободных мест к общему количеству мест в самолете.
-- Используя оконную функцию выводим суммарное накопление количества вывезенных пассажиров из каждого аэропорта на каждый день.
select flight_no as "Номер рейса", actual_departure as "Дата вылета", departure_airport as "Аэропорт вылета", (count1-count2) as "Кол-во свободных мест", 
		round (((count1-count2)/count1*100), 2) as "Кол-во свободных мест в %", 
		sum (count2) over (partition by departure_airport, actual_departure order by actual_departure) as "Кол-во вывезенных пассажирова"
from (select actual_departure, departure_airport, f.flight_id, f.flight_no, f.aircraft_code, count (seat_no)::numeric as count2, count1  
	from flights f 
	left join boarding_passes bp on f.flight_id = bp.flight_id
	left join (select aircraft_code, count (seat_no)::numeric as count1
				from seats s 
				group by aircraft_code) t1 on f.aircraft_code = t1.aircraft_code
	where actual_departure is not null
	group by f.flight_id, f.flight_no, f.aircraft_code, count1) t2

-- Задание 6. Найдите процентное соотношение перелетов по типам самолетов от общего количества.
-- ОПИСАНИЕ РЕШЕНИЯ.
-- В самом внутреннем подзапросе работаем с таблицей перелетов, выводим в результат идентификатор перелета, его номер, дату вылета и код самолета для каждого перелета,
-- и в последний столбец с помощью оконной функции выводим общее количество рейсов.
-- Следующим этапом, используя результат предыдущего запроса выводим в результат код самолета, общее количество перелетов на каждом самолете с помощью 
-- функции count.
-- И последним этапом используя результат предыдущего запроса выводм в результат все модели самолетов и процентное соотношение перелетов по типам самолетов от общего количества,
-- используя количество перелетов на каждом самолете и общее количество перелетов. 
select aircraft_code as "Код самолета", round((count1/count2)*100, 2) as "Общее кол-во перелетов, в%"
from (
	select aircraft_code, count (aircraft_code)::numeric as count1, count2
	from (select flight_id, flight_no, scheduled_departure, aircraft_code, 
			count (aircraft_code) over ()::numeric as count2
			from flights f) t1
group by aircraft_code, count2) t2

-- Задание 7. Были ли города, в которые можно добраться бизнес - классом дешевле, чем эконом-классом в рамках перелета?
-- ОПИСАНИЕ РЕШЕНИЯ.
-- Работаем с таблицей перелетов. Создаем 2 СТЕ.
-- В первой СТЕ к таблице перелетов джойним сначала таблицу ticket_flights по идентификатору flight_id, затем таблицу airports по идентификатору airport_code.
-- В результат выводим идентификатор передета, аэропорт прибытия, город прибытия, класс обслуживания и с помощью оконной функции выводим мнимальную стоимость перелета.
-- При этом в результат выводим только те строки, в которых класс обслуживания Business.
-- Иными словами для каждого перелета выводим информацию о минимальной стоимости перелета бизнес-классом.
-- Во второй СТЕ делаем тоже самое, но выводим информацию о максимальной стоимости перелета эконом-классом.
-- Далее результат этих двух СТЕ джойним по идентификатору flight_id; в резултьтат выводим идентификатор передета, город прибытия, а также минимальную стоимость перелета
-- бизнес-классом и максимальную стоимости перелета эконом-классом в пределах этого же перелета, и указываем условие, что максимальная стоимость перелета эконом-классом 
-- должна быть больше минимальной стоимости перелета бизнес-классом.
-- Поскольку в результирующей таблице нет данных - значит городов, в которые можно добраться бизнес - классом дешевле, чем эконом-классом в рамках перелета нет.
with cte1 as (
	select distinct f.flight_id, arrival_airport, city, fare_conditions, 
		min (amount) over (partition by f.flight_id, fare_conditions) as amount1
	from flights f 
	join ticket_flights tf on f.flight_id = tf.flight_id 
	join airports a on f.arrival_airport = a.airport_code
	where fare_conditions = 'Business'),
	cte2 as (
	select distinct f.flight_id, arrival_airport, city, fare_conditions, 
		max (amount) over (partition by f.flight_id, fare_conditions) as amount2
	from flights f 
	join ticket_flights tf on f.flight_id = tf.flight_id 
	join airports a on f.arrival_airport = a.airport_code
	where fare_conditions = 'Economy')
select cte1.flight_id, cte1.city, amount1 as "Bisiness cost", amount2 as "Economy cost"
from cte1
join cte2 on cte1.flight_id = cte2.flight_id
where amount2  > amount1

-- Задание 8. Между какими городами нет прямых рейсов?
-- ОПИСАНИЕ РЕШЕНИЯ.
-- Выводим две таблицы. В первом запросе с помощью декартова произведения выводим в результат все возможные сочетания городов из таблицы airports.
-- Во втором запросе из таблицы перелетов в результат выводим столбцы городов, между которыми собственно есть прямой перелет. Для этого к таблице перелетов два раза джойним таблицу
-- airports по идентификатору airport_code, чтобы получить названия городов аэропорта вылета и аэропорта прилета.
-- Далее из результатов первого запроса вычитаем результаты второго запроса с помощью except.
select distinct a.city as city1, a2.city as city2 
from airports a 
cross join airports a2
where a.city  <> a2.city
except 
select distinct a.city as city1, a2.city as city2  
from flights f
join airports a on f.departure_airport = a.airport_code
join airports a2 on f.arrival_airport = a2.airport_code
--создание материализованного представления
create materialized view all_cities as 
	select distinct a.city as city1, a2.city as city2 
	from airports a 
	cross join airports a2
	where a.city  <> a2.city

-- Задание 9. Вычислите расстояние между аэропортами, связанными прямыми рейсами,
-- сравните с допустимой максимальной дальностью перелетов  в самолетах, обслуживающих эти рейсы.
-- ОПИСАНИЕ РЕШЕНИЯ.
-- Работаем с таблицей перелетов flights. К ней джойним дважды таблицу аэропортов, чтобы получить город вылета и город прилета для каждого перелета, а также 
-- джойним таблицу самолетов по идентификатору aircraft_code. В результат выводим код самолета, город вылета и город прибытия для каждого перелета, с помощью
-- формулы, используя координаты городов, выичисляем расстояние между городами для каждого передлета, сюда же выводим столбец с максимальной дальностью перелета самолета, 
-- на котором выполняется соответствующий рейс.
-- Следующим запросом, используя результаты предыдущего запроса, с помощью оператора CASE сравниваем вычисленное расстояние между городами перелета и 
-- максимальную дальность полета применяемого судна.
select city1 as "Город 1", city2 as "Город 2", distance as "Расстояние между городами",
	case when range1 > distance then 'Да'
		else 'Нет'
	end as "Дальность полета самолета больше"
from (
select distinct f.aircraft_code, a.city as city1,
				a2.city as city2,
				round ((acos(sin(radians(a.latitude))*sin(radians(a2.latitude)) + cos(radians(a.latitude))*cos(radians(a2.latitude))*cos(radians(a.longitude-a2.longitude))))*6371) as distance,
				"range" as range1
from flights f
join airports a on f.departure_airport = a.airport_code
join airports a2 on f.arrival_airport = a2.airport_code
join aircrafts a3 on f.aircraft_code = a3.aircraft_code) t1